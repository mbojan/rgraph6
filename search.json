[{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"http://mbojan.github.io/rgraph6/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"http://mbojan.github.io/rgraph6/articles/rgraph6.html","id":"the-formats","dir":"Articles","previous_headings":"","what":"The formats","title":"Examples of the use of the 'rgraph6' package","text":"Let’s generate example directed undirected graphs:","code":"set.seed(123) g_directed <- igraph::sample_gnm(12, 12, directed=TRUE) g_undirected <- igraph::as.undirected(g_directed) igraph::igraph_options(vertex.color=\"white\", vertex.label.color=\"black\",                        edge.color=\"black\", edge.arrow.size=0.5) plot(g_directed) plot(g_undirected)"},{"path":"http://mbojan.github.io/rgraph6/articles/rgraph6.html","id":"digraph6","dir":"Articles","previous_headings":"The formats","what":"Digraph6","title":"Examples of the use of the 'rgraph6' package","text":"‘digraph6’ designed directed graphs. Encoding g_directed give:","code":"as_digraph6(g_directed) ## [1] \"&KG?E@?????GA_C?E??A????_?\""},{"path":"http://mbojan.github.io/rgraph6/articles/rgraph6.html","id":"graph6","dir":"Articles","previous_headings":"The formats","what":"Graph6","title":"Examples of the use of the 'rgraph6' package","text":"‘graph6’ format designed undirected graphs. efficient dense graphs. Encoding g_undirected give:","code":"as_graph6(g_undirected) ## [1] \"KQOGgoG??@W?\""},{"path":"http://mbojan.github.io/rgraph6/articles/rgraph6.html","id":"sparse6","dir":"Articles","previous_headings":"The formats","what":"Sparse6","title":"Examples of the use of the 'rgraph6' package","text":"‘sparse6’ format designed undirected graphs. efficient sparse graphs. Encoding g_undirected give:","code":"as_sparse6(g_undirected) ## [1] \":KcAKYRJKdLG_F\""},{"path":"http://mbojan.github.io/rgraph6/articles/rgraph6.html","id":"main-functions","dir":"Articles","previous_headings":"","what":"Main functions","title":"Examples of the use of the 'rgraph6' package","text":"Main functions encoding network data : graph_as_text() as_graph6() as_sparse6() as_digraph6() Main functions decoding : adjacency_from_text() edgelist_from_text() igraph_from_text() network_from_text() Implemented functions shown following graph: Diagram functions implemented ‘rgraph6’ package","code":""},{"path":[]},{"path":"http://mbojan.github.io/rgraph6/articles/rgraph6.html","id":"encode-a-list-of-igraph-objects","dir":"Articles","previous_headings":"Examples","what":"Encode a list of ‘igraph’ objects","title":"Examples of the use of the 'rgraph6' package","text":"Generate list igraph objects: Encode ‘graph6’ symbols: Encode ‘sparse6’ symbols:","code":"set.seed(666) igraph_list <- replicate(5, igraph::sample_gnp(10, 0.1, directed=FALSE),                           simplify = FALSE) as_graph6(igraph_list) ## [1] \"ICG_@?W??\" \"I????@B?G\" \"I?@O????W\" \"I@@A?E???\" \"I?_?_@_??\" as_sparse6(igraph_list) ## [1] \":IeASjaeR\" \":IoCp{^\"   \":IiC]Rg\"   \":IeIgWu`\"  \":IgAo{@D\""},{"path":"http://mbojan.github.io/rgraph6/articles/rgraph6.html","id":"decode-a-vector-of-different-types-of-symbols","dir":"Articles","previous_headings":"Examples","what":"Decode a vector of different types of symbols","title":"Examples of the use of the 'rgraph6' package","text":"Using example data g6, d6, s6 provided package:","code":"# Create a vector with a mixture of 'graph6', 'digraph6' and 'sparse6' symbols x <- c(g6[1], s6[2], d6[3]) x ## [1] \"N??E??G?e?G?????GGO\"                      ## [2] \":NkF?XduSqiDRwYU~\"                        ## [3] \"&N?R_?E?C?D??U_A????????O???????????????\"  # Parse to igraph objects (package igraph required) igraph_from_text(x) ## [[1]] ## IGRAPH 34bd007 U--- 15 10 --  ## + edges from 34bd007: ##  [1]  1-- 7  1--11  2-- 7  2--11  2--12  2--15  5-- 9  7--10  8--15 13--15 ##  ## [[2]] ## IGRAPH dca119b U--- 15 13 --  ## + edges from dca119b: ##  [1]  2-- 7  2-- 9  4--10  6--10  6--12  7--12 11--12  5--13  6--13 10--13 ## [11]  4--15 10--15 14--15 ##  ## [[3]] ## IGRAPH 8eb702c D--- 15 15 --  ## + edges from 8eb702c: ##  [1] 1-> 8 1->11 1->12 1->13 2->13 2->14 3->10 4-> 7 4-> 9 5-> 8 5->10 5->11 ## [13] 5->13 6-> 8 9->14  # Parse to network objects (package network required) network_from_text(x) ## Loading required namespace: network ## [[1]] ##  Network attributes: ##   vertices = 15  ##   directed = FALSE  ##   hyper = FALSE  ##   loops = FALSE  ##   multiple = FALSE  ##   bipartite = FALSE  ##   total edges= 10  ##     missing edges= 0  ##     non-missing edges= 10  ##  ##  Vertex attribute names:  ##     vertex.names  ##  ## No edge attributes ##  ## [[2]] ##  Network attributes: ##   vertices = 15  ##   directed = FALSE  ##   hyper = FALSE  ##   loops = FALSE  ##   multiple = FALSE  ##   bipartite = FALSE  ##   total edges= 13  ##     missing edges= 0  ##     non-missing edges= 13  ##  ##  Vertex attribute names:  ##     vertex.names  ##  ## No edge attributes ##  ## [[3]] ##  Network attributes: ##   vertices = 15  ##   directed = TRUE  ##   hyper = FALSE  ##   loops = FALSE  ##   multiple = FALSE  ##   bipartite = FALSE  ##   total edges= 15  ##     missing edges= 0  ##     non-missing edges= 15  ##  ##  Vertex attribute names:  ##     vertex.names  ##  ## No edge attributes"},{"path":"http://mbojan.github.io/rgraph6/articles/rgraph6.html","id":"tidy-graph-databases","dir":"Articles","previous_headings":"Examples","what":"Tidy graph databases","title":"Examples of the use of the 'rgraph6' package","text":"formats shine need store large number graphs data frame. Let’s generate list random graphs igraph objects store data frame column graph6 symbols: Nice compact. can go computations saving results together graph data: … even save simple CSV file!","code":"# Generate list of igraph objects set.seed(666)  d <- data.frame(   g6 = as_graph6(replicate(     10,     igraph::random.graph.game(sample(3:12, replace=TRUE), p=.5, directed=FALSE),     simplify=FALSE   )) ) d ##              g6 ## 1         FblF_ ## 2           DFc ## 3       HfTaMwk ## 4  KefToktrftZ~ ## 5   JPraDzZQ?M? ## 6            Bo ## 7          Ed`w ## 8        Gpuq|{ ## 9          EbSG ## 10   ICNa@Gg\\\\o d2 <- within(   d, {     igraphs <- igraph_from_text(g6)     vc <- vapply(igraphs, igraph::vcount, integer(1))     ec <- vapply(igraphs, igraph::ecount, numeric(1))     density <- vapply(igraphs, igraph::edge_density, numeric(1)) }) d2$igraphs <- NULL str(d2, 1) ## 'data.frame':    10 obs. of  4 variables: ##  $ g6     : chr  \"FblF_\" \"DFc\" \"HfTaMwk\" \"KefToktrftZ~\" ... ##  $ density: num  0.524 0.5 0.5 0.621 0.436 ... ##  $ ec     : num  11 5 18 41 24 2 8 19 6 17 ##  $ vc     : int  7 5 9 12 11 3 6 8 6 10 write.csv(d2, row.names = FALSE) ## \"g6\",\"density\",\"ec\",\"vc\" ## \"FblF_\",0.523809523809524,11,7 ## \"DFc\",0.5,5,5 ## \"HfTaMwk\",0.5,18,9 ## \"KefToktrftZ~\",0.621212121212121,41,12 ## \"JPraDzZQ?M?\",0.436363636363636,24,11 ## \"Bo\",0.666666666666667,2,3 ## \"Ed`w\",0.533333333333333,8,6 ## \"Gpuq|{\",0.678571428571429,19,8 ## \"EbSG\",0.4,6,6 ## \"ICNa@Gg\\o\",0.377777777777778,17,10"},{"path":"http://mbojan.github.io/rgraph6/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michal Bojanowski. Author, maintainer.            Kozminski University David Schoch. Author.","code":""},{"path":"http://mbojan.github.io/rgraph6/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McKay, B. D., & Piperno, . (2014). Practical graph isomorphism, II. Journal symbolic computation, 60, 94-112. Bojanowski M, Schoch D (2021). rgraph6: Representing Graphs graph6, dgraph6 sparse6 Strings. R package version: 2.0-0, URL: https://mbojan.github.io/rgraph6/","code":"@Article{,   title = {Practical graph isomorphism, II},   author = {Brendan McKay and Adolfo Piperno},   journal = {Journal of Symbolic Computation},   year = {2014},   volume = {60},   pages = {94--112}, } @Manual{,   title = {{rgraph6}: Representing Graphs as graph6, dgraph6 or sparse6 Strings},   author = {Micha\\l{} Bojanowski and David Schoch},   year = {2021},   note = {R package version: 2.0-0},   url = {https://mbojan.github.io/rgraph6/}, }"},{"path":"http://mbojan.github.io/rgraph6/index.html","id":"rgraph6-representing-graphs-as-graph6-digraph6-or-sparse6-strings-","dir":"","previous_headings":"","what":"Representing Graphs as graph6, digraph6 or sparse6 Strings","title":"Representing Graphs as graph6, digraph6 or sparse6 Strings","text":"Functions package allow encoding network data strings printable ASCII characters back using ‘graph6’, ‘sparse6’, ‘digraph6’ formats. convenient number contexts, especially working large number graphs. Provided functions allow directly encode decode graph data form adjacency matrices, edgelists, network objects igraph objects three formats.","code":""},{"path":"http://mbojan.github.io/rgraph6/index.html","id":"what-are-graph6-sparse6-and-digraph6-formats","dir":"","previous_headings":"","what":"What are ‘graph6’, ‘sparse6’ and ‘digraph6’ formats?","title":"Representing Graphs as graph6, digraph6 or sparse6 Strings","text":"‘graph6’, ‘sparse6’ ‘digraph6’ formats encoding graphs strings printable ASCII characters due Brendan McKay. See format specification. Formats ‘graph6’ ‘sparse6’ undirected graphs. Format ‘digraph6’ directed graphs.","code":""},{"path":"http://mbojan.github.io/rgraph6/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Representing Graphs as graph6, digraph6 or sparse6 Strings","text":"Main functions encoding network data : as_graph6() as_sparse6() as_digraph6() Main functions decoding : adjacency_from_text() edgelist_from_text() igraph_from_text() network_from_text() Low-level functions shown following graph:","code":""},{"path":[]},{"path":"http://mbojan.github.io/rgraph6/index.html","id":"encode-list-of-igraph-objects","dir":"","previous_headings":"Examples","what":"Encode list of igraph objects","title":"Representing Graphs as graph6, digraph6 or sparse6 Strings","text":"Generate list igraph objects: Encode ‘graph6’ symbols: Encode ‘sparse6’ symbols:","code":"set.seed(666) igraph_list <- replicate(5, igraph::sample_gnp(10, 0.1, directed=FALSE),                           simplify = FALSE) as_graph6(igraph_list) #> [1] \"ICG_@?W??\" \"I????@B?G\" \"I?@O????W\" \"I@@A?E???\" \"I?_?_@_??\" as_sparse6(igraph_list) #> [1] \":IeASjaeR\" \":IoCp{^\"   \":IiC]Rg\"   \":IeIgWu`\"  \":IgAo{@D\""},{"path":"http://mbojan.github.io/rgraph6/index.html","id":"decode-a-vector-of-different-types-of-symbols","dir":"","previous_headings":"Examples","what":"Decode a vector of different types of symbols","title":"Representing Graphs as graph6, digraph6 or sparse6 Strings","text":"Using example data g6, d6, s6 provided package:","code":"# Create a vector with a mixture of 'graph6', 'digraph6' and 'sparse6' symbols x <- c(g6[1], s6[2], d6[3]) x #> [1] \"N??E??G?e?G?????GGO\"                      #> [2] \":NkF?XduSqiDRwYU~\"                        #> [3] \"&N?R_?E?C?D??U_A????????O???????????????\"  # Parse to igraph objects (package igraph required) igraph_from_text(x) #> [[1]] #> IGRAPH bb50844 U--- 15 10 --  #> + edges from bb50844: #>  [1]  1-- 7  1--11  2-- 7  2--11  2--12  2--15  5-- 9  7--10  8--15 13--15 #>  #> [[2]] #> IGRAPH a41ee59 U--- 15 13 --  #> + edges from a41ee59: #>  [1]  2-- 7  2-- 9  4--10  6--10  6--12  7--12 11--12  5--13  6--13 10--13 #> [11]  4--15 10--15 14--15 #>  #> [[3]] #> IGRAPH 2966182 D--- 15 15 --  #> + edges from 2966182: #>  [1] 1-> 8 1->11 1->12 1->13 2->13 2->14 3->10 4-> 7 4-> 9 5-> 8 5->10 5->11 #> [13] 5->13 6-> 8 9->14  # Parse to network objects (package network required) network_from_text(x) #> Loading required namespace: network #> [[1]] #>  Network attributes: #>   vertices = 15  #>   directed = FALSE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 10  #>     missing edges= 0  #>     non-missing edges= 10  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #> No edge attributes #>  #> [[2]] #>  Network attributes: #>   vertices = 15  #>   directed = FALSE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 13  #>     missing edges= 0  #>     non-missing edges= 13  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #> No edge attributes #>  #> [[3]] #>  Network attributes: #>   vertices = 15  #>   directed = TRUE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 15  #>     missing edges= 0  #>     non-missing edges= 15  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #> No edge attributes"},{"path":"http://mbojan.github.io/rgraph6/index.html","id":"tidy-graph-databases","dir":"","previous_headings":"Examples","what":"Tidy graph databases","title":"Representing Graphs as graph6, digraph6 or sparse6 Strings","text":"formats shine need store large number graphs data frame. Let’s generate list random graphs igraph objects store data frame column graph6 symbols: Nice compact. can go computations saving results together graph data, even save simple CSV file!","code":"library(\"dplyr\")  # Generate list of igraph objects set.seed(666)  d <- tibble::tibble(   g6 = replicate(     10,     igraph::random.graph.game(sample(3:12, replace=TRUE), p=.5, directed=FALSE),     simplify=FALSE   ) %>%     as_graph6() ) d #> # A tibble: 10 × 1 #>    g6             #>    <chr>          #>  1 \"FblF_\"        #>  2 \"DFc\"          #>  3 \"HfTaMwk\"      #>  4 \"KefToktrftZ~\" #>  5 \"JPraDzZQ?M?\"  #>  6 \"Bo\"           #>  7 \"Ed`w\"         #>  8 \"Gpuq|{\"       #>  9 \"EbSG\"         #> 10 \"ICNa@Gg\\\\o\" d %>%   dplyr::mutate(     igraphs = igraph_from_text(g6),     vc = purrr::map_dbl(igraphs, igraph::vcount),     ec = purrr::map_dbl(igraphs, igraph::ecount),     density = purrr::map_dbl(igraphs, igraph::edge_density)   ) %>%   dplyr::select(-igraphs) %>%   write.csv(row.names = FALSE) #> \"g6\",\"vc\",\"ec\",\"density\" #> \"FblF_\",7,11,0.523809523809524 #> \"DFc\",5,5,0.5 #> \"HfTaMwk\",9,18,0.5 #> \"KefToktrftZ~\",12,41,0.621212121212121 #> \"JPraDzZQ?M?\",11,24,0.436363636363636 #> \"Bo\",3,2,0.666666666666667 #> \"Ed`w\",6,8,0.533333333333333 #> \"Gpuq|{\",8,19,0.678571428571429 #> \"EbSG\",6,6,0.4 #> \"ICNa@Gg\\o\",10,17,0.377777777777778"},{"path":"http://mbojan.github.io/rgraph6/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Representing Graphs as graph6, digraph6 or sparse6 Strings","text":"Install development version GitHub : Nightly Windows MacOS binaries available R Universe:","code":"# install.packages(\"remotes\") remotes::install_github(\"mbojan/rgraph6\", build_vignettes=TRUE) install.packages(\"rgraph6\", repos = \"https://mbojan.r-universe.dev\")"},{"path":"http://mbojan.github.io/rgraph6/index.html","id":"authors-contributors-and-citation","dir":"","previous_headings":"","what":"Authors, contributors and citation","title":"Representing Graphs as graph6, digraph6 or sparse6 Strings","text":"Author maintainer: Michal Bojanowski michal2992@gmail.com (https://orcid.org/0000-0001-7503-852X, Kozminski University). Co-authors: David Schoch (https://orcid.org/0000-0003-2952-4812) cite package please use following entries: McKay B, Piperno (2014). “Practical graph isomorphism, II.” Journal Symbolic Computation, 60, 94–112. Bojanowski M, Schoch D (2021). rgraph6: Representing Graphs graph6, dgraph6 sparse6 Strings. R package version: 2.0-0, https://mbojan.github.io/rgraph6/.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/adjacency_from_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Create adjacency matrices from 'graph6', 'sparse6', or 'digraph6' symbols — adjacency_from_text","title":"Create adjacency matrices from 'graph6', 'sparse6', or 'digraph6' symbols — adjacency_from_text","text":"Create adjacency matrices 'graph6', 'sparse6', 'digraph6' symbols","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/adjacency_from_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create adjacency matrices from 'graph6', 'sparse6', or 'digraph6' symbols — adjacency_from_text","text":"","code":"adjacency_from_text(object, ...)"},{"path":"http://mbojan.github.io/rgraph6/reference/adjacency_from_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create adjacency matrices from 'graph6', 'sparse6', or 'digraph6' symbols — adjacency_from_text","text":"object character vector 'graph6', 'sparse6', 'digraph6' symbols ... arguments, currently ignored","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/adjacency_from_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create adjacency matrices from 'graph6', 'sparse6', or 'digraph6' symbols — adjacency_from_text","text":"list adjacency matrices.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/adjacency_from_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create adjacency matrices from 'graph6', 'sparse6', or 'digraph6' symbols — adjacency_from_text","text":"object contains 'sparse6' symbols, fact encoded edgelists, function return corresponding adjacency matrices creating temporary igraph objects internally.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/adjacency_from_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create adjacency matrices from 'graph6', 'sparse6', or 'digraph6' symbols — adjacency_from_text","text":"","code":"# Graph6 symbols sampleg6 #> [1] \"CR\"       \"CJ\"       \"CN\"       \"F_?xo\"    \"F@h^_\"    \"F@Miw\"    \"Hr\\\\~~~~\" #> [8] \"H}u|z|~\"  \"Ht\\\\~~z~\" adjacency_from_text(samplegparse6 symbols s6 <- c(\":DgXI@G~\", \":DgWCgCb\") adjacency_from_text(s6) #> [[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    1    1    1 #> [3,]    0    1    0    1    1 #> [4,]    0    1    1    0    1 #> [5,]    1    1    1    1    0 #>  #> [[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    1 #> [2,]    0    0    1    1    1 #> [3,]    0    1    0    1    1 #> [4,]    1    1    1    0    1 #> [5,]    1    1    1    1    0 #>   # Digraph6 symbol d6 <- \"&N????C??D?_G??C?????_?C_??????C??Q@O?G?\" adjacency_from_text(d6) #> [[1]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #>  [2,]    0    0    0    0    0    0    0    0    0     0     0     0     1 #>  [3,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #>  [4,]    1    0    1    0    0    0    0    0    0     1     0     0     0 #>  [5,]    0    0    1    0    0    0    0    0    0     0     0     0     0 #>  [6,]    0    0    0    0    0    0    1    0    0     0     0     0     0 #>  [7,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     1     0     0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     1     0     0     1 #> [10,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [11,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [12,]    0    0    0    0    0    0    0    0    0     0     0     0     1 #> [13,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [14,]    0    1    0    0    0    0    0    0    1     0     1     0     0 #> [15,]    0    0    0    0    0    0    0    0    1     0     0     0     0 #>       [,14] [,15] #>  [1,]     0     0 #>  [2,]     0     0 #>  [3,]     0     0 #>  [4,]     0     0 #>  [5,]     0     0 #>  [6,]     0     0 #>  [7,]     0     0 #>  [8,]     0     0 #>  [9,]     0     0 #> [10,]     0     0 #> [11,]     0     0 #> [12,]     0     0 #> [13,]     1     0 #> [14,]     0     0 #> [15,]     0     0 #>"},{"path":"http://mbojan.github.io/rgraph6/reference/as_digraph6.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode network data as 'digraph6' symbols — as_digraph6","title":"Encode network data as 'digraph6' symbols — as_digraph6","text":"Generic function encoding directed networks 'digraph6' symbol(s). See available methods.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/as_digraph6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode network data as 'digraph6' symbols — as_digraph6","text":"","code":"as_digraph6(object)  # S3 method for matrix as_digraph6(object)  # S3 method for igraph as_digraph6(object)  # S3 method for network as_digraph6(object)  # S3 method for list as_digraph6(object)  # S3 method for default as_digraph6(object)"},{"path":"http://mbojan.github.io/rgraph6/reference/as_digraph6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode network data as 'digraph6' symbols — as_digraph6","text":"object matrix, igraph object network object list thereof. See Methods section .","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/as_digraph6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode network data as 'digraph6' symbols — as_digraph6","text":"character vector 'digraph6' symbols.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/as_digraph6.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Encode network data as 'digraph6' symbols — as_digraph6","text":"'digraph6' format designed directed graphs. Error thrown case given undirected network.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/as_digraph6.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Encode network data as 'digraph6' symbols — as_digraph6","text":"as_digraph6(matrix): Expects object square matrix interpreted adjacency matrix directed graph. as_digraph6(igraph): Igraph object needs directed graph. Requires igraph package. as_digraph6(network): Network object needs directed network. Requires network package. as_digraph6(list): object list function applied element. Consequently, can list mixture supported objects classes (adjacency matrices, igraph, network objects). as_digraph6(default): Throws error unhandled class.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/as_digraph6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode network data as 'digraph6' symbols — as_digraph6","text":"","code":"# From adjacency matrix ---------------------------------------------------- am <- matrix(c(   0,1,0,   0,0,1,   1,0,0),   byrow=TRUE, ncol=3, nrow=3) as_digraph6(am) #> [1] \"&BP_\"  # From igraph objects ------------------------------------------------------ if(requireNamespace(\"igraph\", quietly=TRUE)) {   g <- igraph::graph_from_adjacency_matrix(am)   as_digraph6(g) } #> [1] \"&BP_\"  # From network objects ----------------------------------------------------- if(requireNamespace(\"network\", quietly=TRUE)) {   net <- network::network(am)   as_digraph6(net) } #> [1] \"&BP_\""},{"path":"http://mbojan.github.io/rgraph6/reference/as_graph6.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode network data as 'graph6' symbols — as_graph6","title":"Encode network data as 'graph6' symbols — as_graph6","text":"Generic function encoding undirected networks 'graph6' symbol(s). See available methods.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/as_graph6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode network data as 'graph6' symbols — as_graph6","text":"","code":"as_graph6(object)  # S3 method for matrix as_graph6(object)  # S3 method for igraph as_graph6(object)  # S3 method for network as_graph6(object)  # S3 method for list as_graph6(object)  # S3 method for default as_graph6(object)"},{"path":"http://mbojan.github.io/rgraph6/reference/as_graph6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode network data as 'graph6' symbols — as_graph6","text":"object matrix, igraph object network object list thereof. See Methods section .","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/as_graph6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode network data as 'graph6' symbols — as_graph6","text":"character vector 'graph6' symbols.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/as_graph6.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Encode network data as 'graph6' symbols — as_graph6","text":"'graph6' format designed undirected graphs. Error thrown case given directed graph.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/as_graph6.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Encode network data as 'graph6' symbols — as_graph6","text":"as_graph6(matrix): Expects object square matrix interpreted adjacency matrix undirected graph. function reads upper triangle matrix test whether matrix symmetric. as_graph6(igraph): Igraph object needs undirected graph. Requires igraph package. as_graph6(network): Network object needs directed network. Requires network package. as_graph6(list): object list function applied element. Consequently, can list mixture supported objects classes (adjacency matrices, igraph, network objects). as_graph6(default): default method throws error unhandled class.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/as_graph6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode network data as 'graph6' symbols — as_graph6","text":"","code":"# From adjacency matrix ---------------------------------------------------- am <- matrix(c(   0,1,1,   1,0,0,   1,0,0   ), byrow=TRUE, ncol=3) as_graph6(am) #> [1] \"Bo\"  # From igraph objects ------------------------------------------------------ if(requireNamespace(\"igraph\", quietly=TRUE)) {   g <- igraph::graph_from_adjacency_matrix(am, mode = \"undirected\")   as_graph6(g) } #> [1] \"Bo\"  # From network objects ----------------------------------------------------- if(requireNamespace(\"network\", quietly=TRUE)) {   net <- network::network(am, directed=FALSE)   as_graph6(net) } #> [1] \"Bo\""},{"path":"http://mbojan.github.io/rgraph6/reference/as_sparse6.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode network data as sparse6 symbols — as_sparse6","title":"Encode network data as sparse6 symbols — as_sparse6","text":"Generic function encoding network data 'sparse6' symbol(s). See available methods.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/as_sparse6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode network data as sparse6 symbols — as_sparse6","text":"","code":"as_sparse6(object, ...)  # S3 method for matrix as_sparse6(object, n = max(object, 0), ...)  # S3 method for igraph as_sparse6(object, ...)  # S3 method for network as_sparse6(object, ...)  # S3 method for list as_sparse6(object, ...)  # S3 method for default as_sparse6(object, ...)"},{"path":"http://mbojan.github.io/rgraph6/reference/as_sparse6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode network data as sparse6 symbols — as_sparse6","text":"object edgelist, igraph, network object list thereof. See Methods section . ... arguments passed /methods n number vertices graph","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/as_sparse6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode network data as sparse6 symbols — as_sparse6","text":"character vector 'sparse6' symbols.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/as_sparse6.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Encode network data as sparse6 symbols — as_sparse6","text":"as_sparse6(matrix): Expects object two-column matrix integers interpreted edgelist undirected graph. default network size inferred maximal element object. can overridden providing network size via n argument, results identical though (see Examples). as_sparse6(igraph): Igraph object needs undirected graph. Requires igraph package. as_sparse6(network): Network object needs directed network. Requires network package. as_sparse6(list): object list function applied element. Consequently, can list mixture supported objects classes (edgelist matrices, igraph, network objects). as_sparse6(default): default method fails gracefully.","code":""},{"path":[]},{"path":"http://mbojan.github.io/rgraph6/reference/as_sparse6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode network data as sparse6 symbols — as_sparse6","text":"","code":"# From edgelist matrix ----------------------------------------------------- elm <- matrix(c(   1, 2,   2, 3,   3, 4 ), ncol=2, byrow=TRUE) as_sparse6(elm) # 1--2, 2--3, 3--4 #> [1] \":Cdv\" as_sparse6(elm + 6) # 1, 2, 3, 4, 5, 6, 7--8, 8--9, 9--10 #> [1] \":ImY}N\" as_sparse6(elm, n = 10) # 1--2, 2--3, 3--4, 5, 6, 7, 8, 9, 10 #> [1] \":I`EV\"  # From igraph objects ------------------------------------------------------ if(requireNamespace(\"igraph\")) {   g <- igraph::graph_from_edgelist(elm, directed=FALSE)   as_sparse6(g) } #> [1] \":Cdv\"  # From network objects -------------------------------- if(requireNamespace(\"network\")) {   net <- network::network(elm, directed=FALSE)   as_graph6(net) } #> [1] \"Ch\""},{"path":"http://mbojan.github.io/rgraph6/reference/choose_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose most efficient format heuristically — choose_format","title":"Choose most efficient format heuristically — choose_format","text":"Given graph suggest efficient format 'graph6', 'sparse6' 'digraph6'.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/choose_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose most efficient format heuristically — choose_format","text":"","code":"choose_format(object, ...)  # S3 method for default choose_format(object, ...)  # S3 method for list choose_format(object, ...)"},{"path":"http://mbojan.github.io/rgraph6/reference/choose_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose most efficient format heuristically — choose_format","text":"object Igraph/network object list thereof ... arguments, currently ignored","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/choose_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose most efficient format heuristically — choose_format","text":"Character value 'graph6', 'sparse6' 'digraph6'. object list, vector values length equal length object.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/choose_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choose most efficient format heuristically — choose_format","text":"object directed, suggested format 'digraph6'. object undirected function suggests 'sparse6' density less 0.15 'graph6' otherwise. rule approximate.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/choose_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choose most efficient format heuristically — choose_format","text":"","code":"# From igraph ------------------------------------------------------ if(requireNamespace(\"igraph\")) {    g <- igraph::graph.famous(\"Zachary\")    choose_format(g)        set.seed(123)    glist <- list(       igraph::sample_gnp(n = 15, p = 0.1),       igraph::sample_gnp(n = 15, p = 0.2),        igraph::sample_gnp(n = 15, p = 0.3),       igraph::sample_gnp(n = 15, p = 0.15, directed = TRUE))           choose_format(glist) } #> [[1]] #> [1] \"sparse6\" #>  #> [[2]] #> [1] \"graph6\" #>  #> [[3]] #> [1] \"graph6\" #>  #> [[4]] #> [1] \"digraph6\" #>   # From network ----------------------------------------------------- if(requireNamespace(\"network\")) {    m <- matrix(rbinom(25,1,.4),15,15)    diag(m) <- 0    g <- network::network(m, directed=FALSE)    choose_format(g) } #> [1] \"graph6\""},{"path":"http://mbojan.github.io/rgraph6/reference/edgelist_from_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Create edgelist matrices from 'graph6', 'sparse6', or 'digraph6' symbols — edgelist_from_text","title":"Create edgelist matrices from 'graph6', 'sparse6', or 'digraph6' symbols — edgelist_from_text","text":"Create edgelist matrices 'graph6', 'sparse6', 'digraph6' symbols","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/edgelist_from_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create edgelist matrices from 'graph6', 'sparse6', or 'digraph6' symbols — edgelist_from_text","text":"","code":"edgelist_from_text(object, ...)"},{"path":"http://mbojan.github.io/rgraph6/reference/edgelist_from_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create edgelist matrices from 'graph6', 'sparse6', or 'digraph6' symbols — edgelist_from_text","text":"object character vector 'graph6', 'sparse6', 'digraph6' symbols ... arguments, currently ignored","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/edgelist_from_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create edgelist matrices from 'graph6', 'sparse6', or 'digraph6' symbols — edgelist_from_text","text":"list edgelist matrices.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/edgelist_from_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create edgelist matrices from 'graph6', 'sparse6', or 'digraph6' symbols — edgelist_from_text","text":"object contains 'graph6' 'digraph6' symbols, fact encoded adjacency matrices, function return corresponding edgelist matrices creating temporary igraph objects internally.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/edgelist_from_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create edgelist matrices from 'graph6', 'sparse6', or 'digraph6' symbols — edgelist_from_text","text":"","code":"# Graph6 symbols sampleg6 #> [1] \"CR\"       \"CJ\"       \"CN\"       \"F_?xo\"    \"F@h^_\"    \"F@Miw\"    \"Hr\\\\~~~~\" #> [8] \"H}u|z|~\"  \"Ht\\\\~~z~\" edgelist_from_text(sampleg6) #> [[1]] #>      [,1] [,2] #> [1,]    1    3 #> [2,]    2    4 #> [3,]    3    4 #>  #> [[2]] #>      [,1] [,2] #> [1,]    2    3 #> [2,]    2    4 #> [3,]    3    4 #>  #> [[3]] #>      [,1] [,2] #> [1,]    1    4 #> [2,]    2    3 #> [3,]    2    4 #> [4,]    3    4 #>  #> [[4]] #>      [,1] [,2] #> [1,]    1    2 #> [2,]    3    6 #> [3,]    3    7 #> [4,]    4    6 #> [5,]    4    7 #> [6,]    5    6 #> [7,]    5    7 #>  #> [[5]] #>       [,1] [,2] #>  [1,]    1    5 #>  [2,]    1    7 #>  [3,]    2    6 #>  [4,]    2    7 #>  [5,]    3    4 #>  [6,]    3    5 #>  [7,]    3    7 #>  [8,]    4    6 #>  [9,]    4    7 #> [10,]    5    6 #>  #> [[6]] #>       [,1] [,2] #>  [1,]    1    6 #>  [2,]    2    7 #>  [3,]    3    4 #>  [4,]    3    5 #>  [5,]    3    6 #>  [6,]    4    5 #>  [7,]    4    7 #>  [8,]    5    6 #>  [9,]    5    7 #> [10,]    6    7 #>  #> [[7]] #>       [,1] [,2] #>  [1,]    1    2 #>  [2,]    1    3 #>  [3,]    1    7 #>  [4,]    1    8 #>  [5,]    1    9 #>  [6,]    2    4 #>  [7,]    2    5 #>  [8,]    2    6 #>  [9,]    2    7 #> [10,]    2    8 #> [11,]    2    9 #> [12,]    3    4 #> [13,]    3    5 #> [14,]    3    6 #> [15,]    3    7 #> [16,]    3    8 #> [17,]    3    9 #> [18,]    4    5 #> [19,]    4    6 #> [20,]    4    7 #> [21,]    4    8 #> [22,]    4    9 #> [23,]    5    6 #> [24,]    5    7 #> [25,]    5    8 #> [26,]    5    9 #> [27,]    6    7 #> [28,]    6    8 #> [29,]    6    9 #> [30,]    7    8 #> [31,]    7    9 #> [32,]    8    9 #>  #> [[8]] #>       [,1] [,2] #>  [1,]    1    2 #>  [2,]    1    3 #>  [3,]    1    4 #>  [4,]    1    5 #>  [5,]    1    6 #>  [6,]    1    7 #>  [7,]    2    3 #>  [8,]    2    4 #>  [9,]    2    5 #> [10,]    2    8 #> [11,]    2    9 #> [12,]    3    6 #> [13,]    3    7 #> [14,]    3    8 #> [15,]    3    9 #> [16,]    4    5 #> [17,]    4    6 #> [18,]    4    7 #> [19,]    4    8 #> [20,]    4    9 #> [21,]    5    6 #> [22,]    5    7 #> [23,]    5    8 #> [24,]    5    9 #> [25,]    6    7 #> [26,]    6    8 #> [27,]    6    9 #> [28,]    7    8 #> [29,]    7    9 #> [30,]    8    9 #>  #> [[9]] #>       [,1] [,2] #>  [1,]    1    2 #>  [2,]    1    3 #>  [3,]    1    4 #>  [4,]    1    7 #>  [5,]    1    8 #>  [6,]    1    9 #>  [7,]    2    5 #>  [8,]    2    6 #>  [9,]    2    7 #> [10,]    2    8 #> [11,]    2    9 #> [12,]    3    4 #> [13,]    3    5 #> [14,]    3    6 #> [15,]    3    7 #> [16,]    3    8 #> [17,]    3    9 #> [18,]    4    5 #> [19,]    4    6 #> [20,]    4    7 #> [21,]    4    8 #> [22,]    4    9 #> [23,]    5    6 #> [24,]    5    7 #> [25,]    5    8 #> [26,]    5    9 #> [27,]    6    7 #> [28,]    6    8 #> [29,]    6    9 #> [30,]    7    9 #> [31,]    8    9 #>   # Sparse6 symbols s6 <- c(\":DgXI@G~\", \":DgWCgCb\") edgelist_from_text(s6) #> [[1]] #>      [,1] [,2] #> [1,]    2    3 #> [2,]    2    4 #> [3,]    3    4 #> [4,]    1    5 #> [5,]    2    5 #> [6,]    3    5 #> [7,]    4    5 #> attr(,\"gorder\") #> [1] 5 #>  #> [[2]] #>      [,1] [,2] #> [1,]    2    3 #> [2,]    1    4 #> [3,]    2    4 #> [4,]    3    4 #> [5,]    1    5 #> [6,]    2    5 #> [7,]    3    5 #> [8,]    4    5 #> attr(,\"gorder\") #> [1] 5 #>   # Digraph6 symbol d6 <- \"&N????C??D?_G??C?????_?C_??????C??Q@O?G?\" edgelist_from_text(d6) #> [[1]] #>       [,1] [,2] #>  [1,]    2   13 #>  [2,]    4    1 #>  [3,]    4    3 #>  [4,]    4   10 #>  [5,]    5    3 #>  [6,]    6    7 #>  [7,]    8   10 #>  [8,]    9   10 #>  [9,]    9   13 #> [10,]   12   13 #> [11,]   13   14 #> [12,]   14    2 #> [13,]   14    9 #> [14,]   14   11 #> [15,]   15    9 #>"},{"path":"http://mbojan.github.io/rgraph6/reference/from_digraph6.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsing digraph6 symbols — from_digraph6","title":"Parsing digraph6 symbols — from_digraph6","text":"functions take vector 'digraph6' symbols return list types objects: adjacency_from_digraph6() creates adjacency matrices igraph_from_digraph6() creates 'igraph' objects. Requires package igraph installed. network_from_digraph6() creates 'network' objects. Requires package network installed.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/from_digraph6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsing digraph6 symbols — from_digraph6","text":"","code":"adjacency_from_digraph6(d6)  igraph_from_digraph6(d6, ...)  network_from_digraph6(d6, ...)"},{"path":"http://mbojan.github.io/rgraph6/reference/from_digraph6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parsing digraph6 symbols — from_digraph6","text":"d6 character vector 'digraph6' symbols ... arguments, see Details.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/from_digraph6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parsing digraph6 symbols — from_digraph6","text":"returned object : adjacency_from_digraph6(), list length input square symmetric adjacency matrices. igraph_from_digraph6(), list 'igraph' objects network_from_digraph6(), list 'network' objects","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/from_digraph6.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parsing digraph6 symbols — from_digraph6","text":"igraph_from_digraph6() additional arguments passed igraph::graph_from_adjacency_matrix() network_from_digraph6() additional arguments passed network::.network()","code":""},{"path":[]},{"path":"http://mbojan.github.io/rgraph6/reference/from_digraph6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parsing digraph6 symbols — from_digraph6","text":"","code":"am <- matrix(rbinom(16, 1, 0.3), 4, 4) d6 <- as_digraph6(am)  # To adjacency matrix ------------------------------------------------------ adjacency_from_digraph6(d6) #> $`&CaR?` #>      [,1] [,2] [,3] [,4] #> [1,]    1    0    0    0 #> [2,]    1    0    0    1 #> [3,]    0    0    1    1 #> [4,]    0    0    0    0 #>   # To igraph objects -------------------------------------------------------- if(requireNamespace(\"igraph\", quietly=TRUE)) {   igraph_from_digraph6(d6) } #> $`&CaR?` #> IGRAPH 5e5ec47 D--- 4 5 --  #> + edges from 5e5ec47: #> [1] 1->1 2->1 2->4 3->3 3->4 #>   # To network objects ------------------------------------------------------- if(requireNamespace(\"network\", quietly=TRUE)) {   network_from_digraph6(d6) } #> $`&CaR?` #>  Network attributes: #>   vertices = 4  #>   directed = TRUE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 3  #>     missing edges= 0  #>     non-missing edges= 3  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #> No edge attributes #>"},{"path":"http://mbojan.github.io/rgraph6/reference/from_graph6.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions parsing 'graph6' symbols — from_graph6","title":"Functions parsing 'graph6' symbols — from_graph6","text":"functions take vector 'graph6' symbols return list types objects: adjacency_from_graph6() creates adjacency matrices igraph_from_graph6() creates 'igraph' objects. Requires package igraph installed. network_from_graph6() creates network objects. Requires package network installed.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/from_graph6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions parsing 'graph6' symbols — from_graph6","text":"","code":"adjacency_from_graph6(g6)  igraph_from_graph6(g6, ...)  network_from_graph6(g6, ...)"},{"path":"http://mbojan.github.io/rgraph6/reference/from_graph6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions parsing 'graph6' symbols — from_graph6","text":"g6 character vector 'graph6' symbols ... arguments, see Details.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/from_graph6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions parsing 'graph6' symbols — from_graph6","text":"returned object : adjacency_from_graph6(), list length input square symmetric adjacency matrices. igraph_from_graph6(), list 'igraph' objects network_from_graph6(), list network objects","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/from_graph6.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions parsing 'graph6' symbols — from_graph6","text":"igraph_from_graph6() additional arguments passed igraph::graph_from_adjacency_matrix() network_from_graph6() additional arguments passed network::.network()","code":""},{"path":[]},{"path":"http://mbojan.github.io/rgraph6/reference/from_graph6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions parsing 'graph6' symbols — from_graph6","text":"","code":"A <- matrix(c(0,1,0,1,               1,0,1,0,               0,1,0,1,               1,0,1,0), 4, 4, byrow = TRUE) g6 <- as_graph6(A)  # To adjacency matrix ------------------------------------------------------ adjacency_from_graph6(g6) #> $Cl #>      [,1] [,2] [,3] [,4] #> [1,]    0    1    0    1 #> [2,]    1    0    1    0 #> [3,]    0    1    0    1 #> [4,]    1    0    1    0 #>   # To igraph objects -------------------------------------------------------- if(requireNamespace(\"igraph\", quietly=TRUE)) {   igraph_from_graph6(g6) } #> $Cl #> IGRAPH 167ac86 U--- 4 4 --  #> + edges from 167ac86: #> [1] 1--2 1--4 2--3 3--4 #>   # To network objects ------------------------------------------------------- if(requireNamespace(\"network\", quietly=TRUE)) {   network_from_graph6(g6) } #> $Cl #>  Network attributes: #>   vertices = 4  #>   directed = FALSE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 4  #>     missing edges= 0  #>     non-missing edges= 4  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #> No edge attributes #>"},{"path":"http://mbojan.github.io/rgraph6/reference/from_sparse6.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsing 'sparse6' symbols — from_sparse6","title":"Parsing 'sparse6' symbols — from_sparse6","text":"functions take character vector 'sparse6' symbols return list types objects: edgelist_from_sparse6() creates edgelist matrices igraph_from_sparse6() creates 'igraph' objects. Requires package igraph installed. network_from_sparse6() creates 'network' objects. Requires package network installed.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/from_sparse6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsing 'sparse6' symbols — from_sparse6","text":"","code":"edgelist_from_sparse6(s6)  igraph_from_sparse6(s6)  network_from_sparse6(s6)"},{"path":"http://mbojan.github.io/rgraph6/reference/from_sparse6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parsing 'sparse6' symbols — from_sparse6","text":"s6 character vector 'sparse6' symbols","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/from_sparse6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parsing 'sparse6' symbols — from_sparse6","text":"returned object : edgelist_from_sparse6(), list length input two-column edgelist matrices. matrix gorder attribute storing number vertices graph. igraph_from_sparse6(), list 'igraph' objects network_from_sparse6(), list 'network' objects","code":""},{"path":[]},{"path":"http://mbojan.github.io/rgraph6/reference/from_sparse6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parsing 'sparse6' symbols — from_sparse6","text":"","code":"elm <- structure(c(1, 1, 2, 2, 4, 4, 5, 6, 9, 10, 7, 8, 4, 8, 6, 8,     8, 5, 4, 6), .Dim = c(10L, 2L)) s6 <- as_sparse6(elm, n = 10)  # To edgelist matrix ------------------------------------------------------- edgelist_from_sparse6(s6) #> $`:IeEgqO_CXHt` #>       [,1] [,2] #>  [1,]    2    4 #>  [2,]    4    6 #>  [3,]    5    6 #>  [4,]    1    7 #>  [5,]    1    8 #>  [6,]    2    8 #>  [7,]    4    8 #>  [8,]    5    8 #>  [9,]    4    9 #> [10,]    6   10 #> attr(,\"gorder\") #> [1] 10 #>   # To igraph object --------------------------------------------------------- if(requireNamespace(\"igraph\", quietly=TRUE)) {   igraph_from_sparse6(s6) } #> $`:IeEgqO_CXHt` #> IGRAPH bf77019 U--- 10 10 --  #> + edges from bf77019: #>  [1] 2-- 4 4-- 6 5-- 6 1-- 7 1-- 8 2-- 8 4-- 8 5-- 8 4-- 9 6--10 #>   # To network object -------------------------------------------------------- if(requireNamespace(\"network\", quietly=TRUE)) {   network_from_sparse6(s6) } #> $`:IeEgqO_CXHt` #>  Network attributes: #>   vertices = 10  #>   directed = FALSE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 10  #>     missing edges= 0  #>     non-missing edges= 10  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #> No edge attributes #>"},{"path":"http://mbojan.github.io/rgraph6/reference/graph_as_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode graph as text — graph_as_text","title":"Encode graph as text — graph_as_text","text":"Encode graph 'graph6', 'sparse6' 'digraph6' choosing format automatically.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/graph_as_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode graph as text — graph_as_text","text":"","code":"graph_as_text(object, ...)  # S3 method for default graph_as_text(object, ...)  # S3 method for list graph_as_text(object, ...)"},{"path":"http://mbojan.github.io/rgraph6/reference/graph_as_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode graph as text — graph_as_text","text":"object igraph/network object list thereof ... arguments, currently ignored","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/graph_as_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode graph as text — graph_as_text","text":"character vector encoded graphs.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/graph_as_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Encode graph as text — graph_as_text","text":"object list may mixture 'network' 'igraph' objects.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/graph_as_text.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Encode graph as text — graph_as_text","text":"graph_as_text(default): default method chooses encoding format automatically using choose_format(). graph_as_text(list): list method applies default method element.","code":""},{"path":[]},{"path":"http://mbojan.github.io/rgraph6/reference/graph_as_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode graph as text — graph_as_text","text":"","code":"# From igraph ------------------------------------------------------ if(requireNamespace(\"igraph\")) {    g <- igraph::graph.famous(\"Zachary\")    graph_as_text(g)        glist <- list(       igraph::sample_gnp(n = 15,p = 0.1),       igraph::sample_gnp(n = 15,p = 0.2),        igraph::sample_gnp(n = 15,p = 0.3))           graph_as_text(glist) } #> [[1]] #> [1] \":NiMEcpPX\\\\hHV\" #>  #> [[2]] #> [1] \"NOGSOO`OA_SA?a?OCE?\" #>  #> [[3]] #> [1] \"NA^?aGRb?cvThACFLwg\" #>   # From network ----------------------------------------------------- if(requireNamespace(\"network\")) {    m <- matrix(rbinom(25,1,.4),5,5)    diag(m) <- 0    g <- network::network(m, directed=FALSE)    graph_as_text(g) } #> [1] \"Dzs\""},{"path":"http://mbojan.github.io/rgraph6/reference/igraph_from_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Create igraph objects from 'graph6', 'sparse6', or 'digraph6' symbols — igraph_from_text","title":"Create igraph objects from 'graph6', 'sparse6', or 'digraph6' symbols — igraph_from_text","text":"Create igraph objects 'graph6', 'sparse6', 'digraph6' symbols","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/igraph_from_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create igraph objects from 'graph6', 'sparse6', or 'digraph6' symbols — igraph_from_text","text":"","code":"igraph_from_text(object)"},{"path":"http://mbojan.github.io/rgraph6/reference/igraph_from_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create igraph objects from 'graph6', 'sparse6', or 'digraph6' symbols — igraph_from_text","text":"object character vector 'graph6', 'sparse6', 'digraph6' symbols","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/igraph_from_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create igraph objects from 'graph6', 'sparse6', or 'digraph6' symbols — igraph_from_text","text":"list 'igraph' objects.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/igraph_from_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create igraph objects from 'graph6', 'sparse6', or 'digraph6' symbols — igraph_from_text","text":"","code":"if(requireNamespace(\"igraph\", quietly=TRUE)) {    # Graph6 symbols    sampleg6    igraph_from_text(sampleg6)     # Sparse6 symbols    s6 <- c(\":DgXI@G~\", \":DgWCgCb\")    igraph_from_text(s6)     # Digraph6 symbol    d6 <- \"&N????C??D?_G??C?????_?C_??????C??Q@O?G?\"    igraph_from_text(d6) } #> [[1]] #> IGRAPH 0be9f9f D--- 15 15 --  #> + edges from 0be9f9f: #>  [1]  2->13  4-> 1  4-> 3  4->10  5-> 3  6-> 7  8->10  9->10  9->13 12->13 #> [11] 13->14 14-> 2 14-> 9 14->11 15-> 9 #>"},{"path":"http://mbojan.github.io/rgraph6/reference/is_graph6.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer or test for graph6, sparse6, and digraph6 symbols — is_graph6","title":"Infer or test for graph6, sparse6, and digraph6 symbols — is_graph6","text":"Functions is_graph6(), is_sparse6()), is_digraph6() test elements character vector valid symbols particular type. Function guess_format() tries guess type symbols used x.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/is_graph6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer or test for graph6, sparse6, and digraph6 symbols — is_graph6","text":"","code":"is_graph6(x)  is_sparse6(x)  is_digraph6(x)  guess_format(x)"},{"path":"http://mbojan.github.io/rgraph6/reference/is_graph6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer or test for graph6, sparse6, and digraph6 symbols — is_graph6","text":"x character vector","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/is_graph6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer or test for graph6, sparse6, and digraph6 symbols — is_graph6","text":"Logical vector length equal length(x) TRUE element valid symbol FALSE otherwise. Function guess_format() returns character vector length x values \"graph6\", \"sparse6\", \"digraph6\" depending type symbol present, NA symbol unknown matches one type.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/is_graph6.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Infer or test for graph6, sparse6, and digraph6 symbols — is_graph6","text":"moment test performed using regular expressions. Theoretically may result false positives.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/is_graph6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer or test for graph6, sparse6, and digraph6 symbols — is_graph6","text":"","code":"all(is_graph6(g6)) #> [1] TRUE all(is_sparse6(s6)) #> [1] TRUE all(is_digraph6(d6)) #> [1] TRUE  # Vector mixing graphs in various formats x <- g6 x[seq(2, 20, by = 3)] <- s6[seq(2, 20, by = 3)] x[seq(3, 20, by = 3)] <- d6[seq(3, 20, by = 3)] guess_format(x) #>  [1] \"graph6\"   \"sparse6\"  \"digraph6\" \"graph6\"   \"sparse6\"  \"digraph6\" #>  [7] \"graph6\"   \"sparse6\"  \"digraph6\" \"graph6\"   \"sparse6\"  \"digraph6\" #> [13] \"graph6\"   \"sparse6\"  \"digraph6\" \"graph6\"   \"sparse6\"  \"digraph6\" #> [19] \"graph6\"   \"sparse6\""},{"path":"http://mbojan.github.io/rgraph6/reference/network_from_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Create network objects from 'graph6', 'sparse6', or 'digraph6' symbols — network_from_text","title":"Create network objects from 'graph6', 'sparse6', or 'digraph6' symbols — network_from_text","text":"Create network objects 'graph6', 'sparse6', 'digraph6' symbols","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/network_from_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create network objects from 'graph6', 'sparse6', or 'digraph6' symbols — network_from_text","text":"","code":"network_from_text(object)"},{"path":"http://mbojan.github.io/rgraph6/reference/network_from_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create network objects from 'graph6', 'sparse6', or 'digraph6' symbols — network_from_text","text":"object character vector 'graph6', 'sparse6', 'digraph6' symbols","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/network_from_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create network objects from 'graph6', 'sparse6', or 'digraph6' symbols — network_from_text","text":"list 'network' objects.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/network_from_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create network objects from 'graph6', 'sparse6', or 'digraph6' symbols — network_from_text","text":"","code":"# complete graph in graph6 format g6 <- \"G~~~~{\"  # random graph with 15 nodes s6 <- \":NeF?bsl?aNC\"  # random directed graph with 10 nodes d6 <- \"&I???GGGI?_gG??O???\"  network_from_text(g6) #> [[1]] #>  Network attributes: #>   vertices = 8  #>   directed = FALSE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 28  #>     missing edges= 0  #>     non-missing edges= 28  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #> No edge attributes #>  network_from_text(c(g6,s6,d6)) #> [[1]] #>  Network attributes: #>   vertices = 8  #>   directed = FALSE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 28  #>     missing edges= 0  #>     non-missing edges= 28  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #> No edge attributes #>  #> [[2]] #>  Network attributes: #>   vertices = 15  #>   directed = FALSE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 9  #>     missing edges= 0  #>     non-missing edges= 9  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #> No edge attributes #>  #> [[3]] #>  Network attributes: #>   vertices = 10  #>   directed = TRUE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 10  #>     missing edges= 0  #>     non-missing edges= 10  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #> No edge attributes #>"},{"path":"http://mbojan.github.io/rgraph6/reference/read_file6.html","id":null,"dir":"Reference","previous_headings":"","what":"Read files of 'graph6', 'sparse6' or 'digraph6' symbols — read_file6","title":"Read files of 'graph6', 'sparse6' or 'digraph6' symbols — read_file6","text":"Read files 'graph6', 'sparse6' 'digraph6' symbols","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/read_file6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read files of 'graph6', 'sparse6' or 'digraph6' symbols — read_file6","text":"","code":"read_file6(path, type = \"adjacency\")"},{"path":"http://mbojan.github.io/rgraph6/reference/read_file6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read files of 'graph6', 'sparse6' or 'digraph6' symbols — read_file6","text":"path character; path file name type character; one \"adjacency\", \"edgelist\", \"igraph\", \"network\". Type result returned.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/read_file6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read files of 'graph6', 'sparse6' or 'digraph6' symbols — read_file6","text":"list decoded graphs form objects determined type.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/read_file6.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read files of 'graph6', 'sparse6' or 'digraph6' symbols — read_file6","text":"File pointed path text file one graph symbol per line. Optional headers form >>graph6<< >>sparse6<< first line (without newline header) ignored removed.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/read_file6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read files of 'graph6', 'sparse6' or 'digraph6' symbols — read_file6","text":"","code":"g6_file <- tempfile() write(sampleg6,g6_file) read_file6(g6_file, type = \"adjacencyunlink(g6_file)"},{"path":"http://mbojan.github.io/rgraph6/reference/rgraph6-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rgraph6: Representing Graphs as 'graph6', 'digraph6' or 'sparse6' Strings — rgraph6-package","title":"rgraph6: Representing Graphs as 'graph6', 'digraph6' or 'sparse6' Strings — rgraph6-package","text":"Encode network data strings printable ASCII characters. Implemented functions include encoding decoding adjacency matrices, edgelists, igraph, network objects /formats 'graph6', 'sparse6', 'digraph6'. formats methods described McKay, B.D. Piperno, (2014) doi:10.1016/j.jsc.2013.09.003 .","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/rgraph6-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rgraph6: Representing Graphs as 'graph6', 'digraph6' or 'sparse6' Strings — rgraph6-package","text":"Formats 'graph6', 'sparse6' 'digraph6' represent graphs strings printable ASCII characters. formats due Brendan McKay implemented program Nauty (McKay 1978, 1980, 2003, McKay & Piperno 2014), described detail . Package rgraph6 native R implementation formats. main functions as_graph6(), as_digraph6(), as_sparse6() encoding network data igraph_from_text() network_from_text() decoding. also low-level functions decode directly digraph6, graph6, sparse6.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/rgraph6-package.html","id":"citation","dir":"Reference","previous_headings":"","what":"Citation","title":"rgraph6: Representing Graphs as 'graph6', 'digraph6' or 'sparse6' Strings — rgraph6-package","text":"using package please cite referring following publications: McKay B, Piperno (2014). \"Practical graph isomorphism, II.\" Journal Symbolic Computation, 60, 94-112. Bojanowski M, Schoch D (2021). rgraph6: Representing Graphs graph6, dgraph6 sparse6 Strings. R package version: 2.0-0, https://mbojan.github.io/rgraph6/. Call citation(package=\"rgraph6\") details BibTeX entry.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/rgraph6-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"rgraph6: Representing Graphs as 'graph6', 'digraph6' or 'sparse6' Strings — rgraph6-package","text":"McKay, B. D. (1978) Computing automorphisms canonical labellings graphs Combinatorial Mathematics, Lect. Notes Math., vol. 686, Springer-Verlag, Berlin, pp. 223-232 doi:10.1007/BFb0062536 McKay, B. D. (1981). Practical graph isomorphism. Congressus Numerantium, 30, pp. 45-87 McKay, B. D. (2003). \"Nauty\" User’s Guide (version 2.2) (p. 112). Technical Report TR-CS-9002, Australian National University. McKay, B. D., & Piperno, . (2013). Nauty Traces user’s guide (Version 2.5). Computer Science Department, Australian National University, Canberra, Australia. McKay, B. D., & Piperno, . (2014). Practical graph isomorphism, II. Journal symbolic computation, 60, 94-112. doi:10.1016/j.jsc.2013.09.003","code":""},{"path":[]},{"path":"http://mbojan.github.io/rgraph6/reference/rgraph6-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rgraph6: Representing Graphs as 'graph6', 'digraph6' or 'sparse6' Strings — rgraph6-package","text":"Maintainer: Michal Bojanowski michal2992@gmail.com (ORCID) (Kozminski University) Authors: David Schoch david@schochastics.net (ORCID)","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/sampleg6.html","id":null,"dir":"Reference","previous_headings":"","what":"Example vectors of 'graph6', 'sparse6', and 'digraph6' codes — sampleg6","title":"Example vectors of 'graph6', 'sparse6', and 'digraph6' codes — sampleg6","text":"Objects g6, s6, d6 vectors codes 'graph6', 'sparse6', 'digraph6' representations respectively. Object sampleg6 vector 'graph6' codes.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/sampleg6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example vectors of 'graph6', 'sparse6', and 'digraph6' codes — sampleg6","text":"","code":"g6  s6  d6  sampleg6"},{"path":"http://mbojan.github.io/rgraph6/reference/sampleg6.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example vectors of 'graph6', 'sparse6', and 'digraph6' codes — sampleg6","text":"three objects g6, s6, d6 character vectors length 20 corresponding undirected (case g6 s6) directed (case d6) graphs varying sizes densities. Object sampleg6 character vector length 9 undirected graphs 'graph6' format.","code":""},{"path":"http://mbojan.github.io/rgraph6/reference/sampleg6.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example vectors of 'graph6', 'sparse6', and 'digraph6' codes — sampleg6","text":"Graphs g6, s6, d6 objects generated using common algorithm consists following steps: value vector sizes node set (15, 30, 60, 120)... ... generate vector edge counts (size edge set) length 5 ranging single edge edge count corresponding density 0.2. Given node set sizes (item 1) edge set sizes (item 2) sample undirected graphs GNM model. undirected graphs encoded g6 s6 Directed graphs created turning undirected edges directed arcs arbitrary manner. encoded d6 object.","code":""},{"path":"http://mbojan.github.io/rgraph6/news/index.html","id":"rgraph6-20-1","dir":"Changelog","previous_headings":"","what":"rgraph6 2.0-1","title":"rgraph6 2.0-1","text":"CRAN release: 2022-03-09 Fixed C-level errors (#31) Re-roxygenize fix HTML validation errors.","code":""},{"path":"http://mbojan.github.io/rgraph6/news/index.html","id":"rgraph6-20-0","dir":"Changelog","previous_headings":"","what":"rgraph6 2.0-0","title":"rgraph6 2.0-0","text":"CRAN release: 2022-02-22 major overhaul package. package now supports ‘sparse6’ ‘digraph6’ formats. complete API graph_as_text(), igraph_from_text(), network_from_text() top level functions plethora low level functions. Added vignette. David Schoch joins coauthor.","code":""},{"path":"http://mbojan.github.io/rgraph6/news/index.html","id":"rgraph6-12","dir":"Changelog","previous_headings":"","what":"rgraph6 1.2","title":"rgraph6 1.2","text":"Corrections documentation Added description graph6 format.","code":""},{"path":"http://mbojan.github.io/rgraph6/news/index.html","id":"rgraph6-11","dir":"Changelog","previous_headings":"","what":"rgraph6 1.1","title":"rgraph6 1.1","text":"Corrected code binary decimal conversion. Previous version returning wrong results binary numbers begin 1 entries 0. Added tests testing binary decimal conversions well converting matrices graph6 format.","code":""},{"path":"http://mbojan.github.io/rgraph6/news/index.html","id":"rgraph6-10","dir":"Changelog","previous_headings":"","what":"rgraph6 1.0","title":"rgraph6 1.0","text":"Added functions b2d d2b conversions decimal binary numbers. based compiled C code much faster older ones written R. Functions bin2dec dec2bin rewritten use newly added compiled code. Added sampleg6 file couple g6 symbols.","code":""},{"path":"http://mbojan.github.io/rgraph6/news/index.html","id":"rgraph6-00-1","dir":"Changelog","previous_headings":"","what":"rgraph6 0.0-1","title":"rgraph6 0.0-1","text":"First beta version package.","code":""}]
